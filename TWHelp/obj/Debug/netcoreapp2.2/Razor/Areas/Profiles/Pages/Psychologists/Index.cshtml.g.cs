#pragma checksum "D:\Projects\проект по авпз\TWHelp\Areas\Profiles\Pages\Psychologists\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c0af2902f61918ecc3d4780ff031d7f4b028e6c2"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_Profiles_Pages_Psychologists_Index), @"mvc.1.0.razor-page", @"/Areas/Profiles/Pages/Psychologists/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAttribute(@"/Areas/Profiles/Pages/Psychologists/Index.cshtml", typeof(AspNetCore.Areas_Profiles_Pages_Psychologists_Index), null)]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\Projects\проект по авпз\TWHelp\Areas\_ViewImports.cshtml"
using Domain.Models.Identity;

#line default
#line hidden
#line 2 "D:\Projects\проект по авпз\TWHelp\Areas\_ViewImports.cshtml"
using Domain.Models.Domain;

#line default
#line hidden
#line 3 "D:\Projects\проект по авпз\TWHelp\Areas\_ViewImports.cshtml"
using TWHelp.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c0af2902f61918ecc3d4780ff031d7f4b028e6c2", @"/Areas/Profiles/Pages/Psychologists/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a20b261fee6531cbb6326723e79904e255f25699", @"/Areas/_ViewImports.cshtml")]
    public class Areas_Profiles_Pages_Psychologists_Index : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(68, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 4 "D:\Projects\проект по авпз\TWHelp\Areas\Profiles\Pages\Psychologists\Index.cshtml"
 if(Model.IsUserPsycho)
{

#line default
#line hidden
            BeginContext(98, 142, true);
            WriteLiteral("    <div class=\"row\" style=\"background-color: lightcoral\">\r\n        <p>Psychologists cannot add likes to other psychologists</p>\r\n    </div>\r\n");
            EndContext();
#line 9 "D:\Projects\проект по авпз\TWHelp\Areas\Profiles\Pages\Psychologists\Index.cshtml"
}

#line default
#line hidden
            BeginContext(243, 351, true);
            WriteLiteral(@"
<div class=""mx-auto"">
    <h2 class=""text-center"">Psychologists page</h2>
</div>

<div class=""container-fluid"">
    <div class=""row"">
        <div class=""col-12 col-sm-11 col-md-10 mx-auto"">
            <p class=""font-weight-bold text-center"">List of all psychologists</p>
            <div class=""d-flex flex-column"" id=""psycho-container"">
");
            EndContext();
            BeginContext(642, 2098, true);
            WriteLiteral(@"            </div>
        </div>
    </div>
</div>

<template id=""template"">
    <div id=""psycho-div"" class=""m-2 p-2"" style=""background-color: #fafafa"">
        <div class=""d-flex flex-column flex-md-row "">
            <div>
                <div>
                    <img id=""psycho-image"" src="""" alt=""profile-image"" class=""m-3 rounded-circle"" style=""border: 1px solid black;"" width=""200"" height=""200"">
                </div>
            </div>
            <div class=""d-flex flex-column flex-md-row flex-md-wrap flex-lg-nowrap"">
                <div class=""m-3"">
                    <p>Name: <span id=""psycho-name""></span></p>
                    <p>Age: <span id=""psycho-age""></span></p>
                    <p>Is psycho confirm his degree: <span id=""psycho-confirm""></span></p>
                </div>
                <div class=""m-3"">
                    <div class=""d-flex"">
                        <p class=""m-1"">Psycho degree:</p>
                        <p class=""m-1"" id=""psycho-degree""></p>
");
            WriteLiteral(@"                    </div>
                    <div class=""d-flex"">
                        <p class=""m-1"">Area of experetise:</p>
                        <p class=""m-1"" id=""psycho-expertise-area""></p>
                    </div>
                    <div class=""d-flex"">
                        <p class=""m-1"">Psycho work experience:</p>
                        <p class=""m-1"" id=""psycho-experience""></p>
                    </div>
                </div>
            </div>
        </div>

        <div>
            <div>
                <p>Number of likes: <span id=""psycho-likes""></span></p>
            </div>
            <div id=""psycho-like"">
                <i id=""psycho-like-like"" class=""far fa-heart"" style=""color: red; font-size: 20px;""></i>
            </div>
        </div>
    </div>
</template>

<style>
    #psycho-like-like {
        transition: all 0.2s ease-in-out; 
    }

    #psycho-like-like:hover {
        transform: scale(1.5, 1.5);
        color: orange;
    }
</sty");
            WriteLiteral("le>\r\n\r\n<script>\r\n    const webRoot = \'http://\' + \'");
            EndContext();
            BeginContext(2741, 13, false);
#line 80 "D:\Projects\проект по авпз\TWHelp\Areas\Profiles\Pages\Psychologists\Index.cshtml"
                            Write(Model.WebRoot);

#line default
#line hidden
            EndContext();
            BeginContext(2754, 26, true);
            WriteLiteral("\';\r\n    const isPsycho = \'");
            EndContext();
            BeginContext(2781, 18, false);
#line 81 "D:\Projects\проект по авпз\TWHelp\Areas\Profiles\Pages\Psychologists\Index.cshtml"
                 Write(Model.IsUserPsycho);

#line default
#line hidden
            EndContext();
            BeginContext(2799, 3500, true);
            WriteLiteral(@"';

    window.onload = function () {
        getPsychosProfiles();
    }

    async function getPsychosProfiles() {
        await fetch(webRoot + '/api/psychologists/all')
            .then(response => response.json())
            .then(data => _displayItems(data))
            .catch(error => console.error('Unable to get items.', error));
    }

    function addLikeToProfile(psychoId) {
        fetch(webRoot + '/api/likes/add/' + psychoId, {
            method: 'POST',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            }
        })
        .catch(error => console.error('Unable to add like.', error));
    }

    function removeLikeFromProfile(psychoId) {
        fetch(webRoot + '/api/likes/remove/' + psychoId, {
            method: 'DELETE',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            }
        })
        .catch(error =");
            WriteLiteral(@"> console.error('Unable to add like.', error));
    }

    function _displayItems(data) {
        const container = document.getElementById('psycho-container');
        container.innerHTML = '';

        data.forEach(item => {
            let newDiv = document.importNode(template.content, true);

            newDiv.getElementById('psycho-name').textContent = item.nickName;
            newDiv.getElementById('psycho-image').src = ""data:image/png;base64,"" + item.avatarImage;
            newDiv.getElementById('psycho-age').textContent = item.age;
            newDiv.getElementById('psycho-degree').textContent = item.education;
            newDiv.getElementById('psycho-expertise-area').textContent = item.areaOfExpertise;
            newDiv.getElementById('psycho-experience').textContent = item.workExperience;
            newDiv.getElementById('psycho-likes').textContent = item.likes;

            if (item.isAccountActivated == 'true') {
                newDiv.getElementById('psycho-confirm').text");
            WriteLiteral(@"Content = 'yes';
            }
            else {
                newDiv.getElementById('psycho-confirm').textContent = 'no';
            }

            if (item.isCurrentUserSetLike) {
                newDiv.getElementById('psycho-like').innerHTML = '<i id=""psycho-like-like"" class=""fas fa-heart"" style=""color: red; font-size: 20px;""></i>';
            }

            //add event listener for click on like
            newDiv.getElementById('psycho-like-like').addEventListener('click', function (element) {
                let container = document.getElementById('psycho-' + item.id);

                //there is already like
                if (element.target.classList.contains('fas')) {
                    removeLikeFromProfile(item.id);
                    container.querySelector('#psycho-like-like').classList.add('far');
                    container.querySelector('#psycho-like-like').classList.remove('fas');
                }
                else {
                    addLikeToProfile(item");
            WriteLiteral(@".id);
                    container.querySelector('#psycho-like-like').classList.add('fas');
                    container.querySelector('#psycho-like-like').classList.remove('far');
                }
            });

            //to get access to element
            newDiv.getElementById('psycho-div').setAttribute('id', 'psycho-' + item.id);

            container.append(newDiv);
        });
    }

</script>
");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TWHelp.Areas.Profiles.Pages.Psychologists.IndexModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<TWHelp.Areas.Profiles.Pages.Psychologists.IndexModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<TWHelp.Areas.Profiles.Pages.Psychologists.IndexModel>)PageContext?.ViewData;
        public TWHelp.Areas.Profiles.Pages.Psychologists.IndexModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
