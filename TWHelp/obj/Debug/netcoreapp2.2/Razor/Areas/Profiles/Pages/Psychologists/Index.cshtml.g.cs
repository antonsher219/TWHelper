#pragma checksum "D:\Projects\проект по авпз\TWHelp\Areas\Profiles\Pages\Psychologists\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "04665355c79a410e59ef9757e00cffa92b34c2be"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_Profiles_Pages_Psychologists_Index), @"mvc.1.0.razor-page", @"/Areas/Profiles/Pages/Psychologists/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAttribute(@"/Areas/Profiles/Pages/Psychologists/Index.cshtml", typeof(AspNetCore.Areas_Profiles_Pages_Psychologists_Index), null)]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\Projects\проект по авпз\TWHelp\Areas\_ViewImports.cshtml"
using Domain.Models.Identity;

#line default
#line hidden
#line 2 "D:\Projects\проект по авпз\TWHelp\Areas\_ViewImports.cshtml"
using Domain.Models.Domain;

#line default
#line hidden
#line 3 "D:\Projects\проект по авпз\TWHelp\Areas\_ViewImports.cshtml"
using TWHelp.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"04665355c79a410e59ef9757e00cffa92b34c2be", @"/Areas/Profiles/Pages/Psychologists/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"edbc150fb1bd4fac81dc98d762603619d51eae9c", @"/Areas/_ViewImports.cshtml")]
    public class Areas_Profiles_Pages_Psychologists_Index : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(75, 1226, true);
            WriteLiteral(@"

<h1>Psychos page</h1>

<div class=""container-fluid"">
    <div class=""row"">
        <div class=""col-10 col-sm-8 col-md-6 mx-auto"">
            <p class=""font-weight-bold"">List of all psychologists</p>
            <div class=""d-flex flex-column"" id=""psycho-container"">

            </div>
        </div>
    </div>
</div>

<template id=""template"">
    <div class=""m-2 p-2"" style=""background-color: lightcyan"">
        <p>Name: <span id=""psycho-name""></span></p>
        <p>Age: <span id=""psycho-age""></span></p>
        <p>Is psycho confirm his degree: <span id=""psycho-confirm""></span></p>
        <div >
            <img id=""psycho-image"" src="""" alt=""profile-image"" class=""rounded-circle"" width=""200"" height=""200"">
        </div>
        <div>
            <p>Psycho degree:</p>
            <p id=""psycho-degree""></p>
        </div>
        <div>
            <p>Area of experetise:</p>
            <p id=""psycho-expertise-area""></p>
        </div>
        <div>
            <p>Psycho work ex");
            WriteLiteral("perience:</p>\r\n            <p id=\"psycho-experience\"></p>\r\n        </div>\r\n        <div>\r\n            <p>Number of likes: <span id=\"psycho-likes\"></span></p>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n");
            EndContext();
            BeginContext(1443, 45, true);
            WriteLiteral("\r\n<script>\r\n    const webRoot = \'http://\' + \'");
            EndContext();
            BeginContext(1489, 13, false);
#line 50 "D:\Projects\проект по авпз\TWHelp\Areas\Profiles\Pages\Psychologists\Index.cshtml"
                            Write(Model.WebRoot);

#line default
#line hidden
            EndContext();
            BeginContext(1502, 2094, true);
            WriteLiteral(@"';

    window.onload = function () {
        getPsychosProfiles();
    }

    async function getPsychosProfiles() {
        await fetch(webRoot + '/api/psychologists/all')
            .then(response => response.json())
            .then(data => _displayItems(data))
            .catch(error => console.error('Unable to get items.', error));
    }

    function addLikeToProfile() {
        const psychoId = document.getElementById('psycho-id').value;

        const data = {
            psychoId: psychoId
        }

        fetch('api/psychologists/all', {
            method: 'POST',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => response.json())
        .catch(error => console.error('Unable to add like.', error));
    }

    function _displayItems(data) {
        const container = document.getElementById('psycho-container'");
            WriteLiteral(@");
        container.innerHTML = '';

        data.forEach(item => {
            let newDiv = template.content.cloneNode(true);

            newDiv.getElementById('psycho-name').textContent = item.nickName;
            newDiv.getElementById('psycho-image').src = ""data:image/png;base64,"" + item.avatarImage;
            newDiv.getElementById('psycho-age').textContent = item.age;
            newDiv.getElementById('psycho-degree').textContent = item.education;
            newDiv.getElementById('psycho-expertise-area').textContent = item.areaOfExpertise;
            newDiv.getElementById('psycho-experience').textContent = item.workExperience;
            newDiv.getElementById('psycho-likes').textContent = item.likes;

            if (item.isAccountActivated == 'true') {
                newDiv.getElementById('psycho-confirm').textContent = 'yes';
            }
            else {
                newDiv.getElementById('psycho-confirm').textContent = 'no';
            }

            container.appe");
            WriteLiteral("nd(newDiv);\r\n        });\r\n    }\r\n\r\n</script>\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TWHelp.Areas.Profiles.Pages.Psychologists.IndexModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<TWHelp.Areas.Profiles.Pages.Psychologists.IndexModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<TWHelp.Areas.Profiles.Pages.Psychologists.IndexModel>)PageContext?.ViewData;
        public TWHelp.Areas.Profiles.Pages.Psychologists.IndexModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
